### 'Core' configuration options
#
# flush_time_agg : This controls how often each of the aggregators (StatsD, Graphite, OpenTSDB, InfluxDB) run their respective aggregation routines.
#                  Setting this value too low could result in fewer metric samples being aggregated, and could lead to excessive CPU utilization.
#                  Setting this value too high could result in building up too many metrics in memory, which could lead to program instability.
#                  A recommended range is between 5000ms & 60000ms.
#                  Default : 10000
#
# debug_mode_enabled : When enabled, debugging info is output to the log files & console. Included are: raw metrics on arrival, aggregated metrics to output.
#                      Default : false
flush_time_agg = 10000
debug_mode_enabled = false



### UI & API HTTP Interface configuration options
#
# ui_and_api_http_enabled : Controls whether or not the UI & API HTTP interface is enabled or not.
#                           Disabling it will mean that any existing alerts/suspensions/etc will continue to function -- you just won't be able to enable/disable/edit/etc them.
#                           The UI/API has no impact on metric ingestion (Graphite, OpenTSDB, etc) or metric output -- those will function regardless of whether this is enabled or not.
#                           Default : true
#
# ui_and_api_http_port : The port that the HTTP user-interface & apis will listen on.
#                        Default : 8080
#
# ui_and_api_http_context : The HTTP context path that StatsAgg will run it's UI & API on. 
#                           Example: http://mydomain.com/THIS-VALUE (where "THIS-VALUE" is the http context) 
#                           Historically, this would be "StatsAgg", but it can be any simple string that conforms to uri conventions.
#                           If you want to run the UI & API off the root context (http://mydomain.com/), leave this field commented out (or blank)
#                           Default: StatsAgg
ui_and_api_http_enabled = true
ui_and_api_http_port = 8080
ui_and_api_http_context = StatsAgg


### 'Sending data to Graphite' configuration options
#
# graphite_output_module_n : StatsAgg supports outputting to multiple Graphite endpoints. Each Graphite endpoint is defined in StatsAgg via a 'Graphite Output Module'.
#                            The format for a 'Graphite Output Module' is: graphite_output_module_n = graphite_output_enabled,graphite_host,graphite_port,graphite_num_send_retry_attempts,graphite_max_metrics_per_message,graphite_sanitize_metric_path,graphite_substitute_characters
#                              graphite_output_enabled : Enables sending metrics to Graphite. Valid values are 'true' or 'false'.
#                              graphite_host : The domain, hostname, or IP address that Graphite runs on (which this application will send metrics to).
#                              graphite_port : The port that Graphite runs on (which this application will send metrics to). Graphite servers usually listen on port 2003. 
#                              graphite_num_send_retry_attempts : The number of times to retry sending metrics to this Graphite output module before giving up. A recommended retry count is 2.
#                              graphite_max_metrics_per_message : The maximum number of metrics to send via TCP in a single TCP 'send' invocation. A recommended value is 1000.
#                              graphite_sanitize_metric_path : Removes all cases of two '.' characters in a row. Valid values are 'true' or 'false'.
#                              graphite_substitute_characters : Some characters don't work well in Graphite, such as '%[]{}()'. 
#                                                               Setting this to 'true' lets StatsAgg make some character substitutions to be more compatible with Graphite. Valid values are 'true' or 'false'.
#                                                               Example: % -> Pct
#
#                              Note: the 'n' at the end of 'graphite_output_module_n' is a number that is unique to that output module.
#                            Examples: graphite_output_module_1 = true,graphite.some-domain.com,2003,2,1000,true,false
#                                      graphite_output_module_2 = true,graphite.some-other-domain.com,2003,3,1000,true,true
graphite_output_module_1 = false,graphite.some-domain.com,2003,2,1000,true,true



### 'Sending data to OpenTSDB' configuration options
#
# opentsdb_telnet_output_module_n : StatsAgg supports outputting to multiple OpenTSDB endpoints. Each 'OpenTSDB via Telnet' endpoint is defined in StatsAgg via a 'OpenTSDB Telnet Output Module'.
#                                   This output format is supported by OpenTSDB 1.0+
#                                   If you are outputting metrics to an OpenTSDB server this module (telnet), then you should not output to the same server via HTTP. 
#                                   The format for a 'OpenTSDB Telnet Output Module' is: opentsdb_telnet_output_module_n = opentsdb_telnet_output_enabled,opentsdb_telnet_host,opentsdb_telnet_port,opentsdb_telnet_num_send_retry_attempts,opentsdb_telnet_sanitize_metric
#                                     opentsdb_telnet_output_enabled : Enables sending metrics to this OpenTSDB output module. Valid values are 'true' or 'false'.
#                                     opentsdb_telnet_host : The domain, hostname, or IP address that OpenTSDB's telnet interface runs on (which this application will send metrics to).
#                                     opentsdb_telnet_port : The port that OpenTSDB's telnet interface runs on (which this application will send metrics to). OpenTSDB's telnet interface usually listen on port 4242. 
#                                     opentsdb_telnet_num_send_retry_attempts : The number of times to retry sending metrics to this OpenTSDB output module before giving up. A recommended retry count is 2.
#                                     opentsdb_telnet_sanitize_metric : Removes all characters from the OpenTSDB 'metric' that are not officially allowed by OpenTSDB (per OpenTSDB documentation). Valid values are 'true' or 'false'.
#                                   Note: the 'n' at the end of 'opentsdb_telnet_output_module_n' is a number that is unique to that output module.
#                                   Examples: opentsdb_telnet_output_module_1 = true,opentsdb.some-domain.com,4242,2,true
#                                             opentsdb_telnet_output_module_2 = true,opentsdb.some-other-domain.com,4242,3,false
#
# opentsdb_http_output_module_n : StatsAgg supports outputting to multiple OpenTSDB endpoints. Each 'OpenTSDB via HTTP' endpoint is defined in StatsAgg via a 'OpenTSDB HTTP Output Module'. 
#                                 This output format is supported by OpenTSDB 2.0+
#                                 The format for a 'OpenTSDB HTTP Output Module' is: opentsdb_http_output_module_n = opentsdb_http_output_enabled,opentsdb_http_url,opentsdb_http_num_send_retry_attempts,opentsdb_http_max_metrics_per_message,opentsdb_http_sanitize_metric
#                                   opentsdb_http_output_enabled : Enables sending metrics to this OpenTSDB output module. Valid values are 'true' or 'false'.
#                                   opentsdb_http_url : The url that you want to send OpenTSDB metrics to. This is generally expected to follow the convention of "http://domain:port/api/put".
#                                   opentsdb_http_num_send_retry_attempts : The number of times to retry sending metrics to this OpenTSDB output module before giving up. A recommended retry count is 2.
#                                   opentsdb_http_max_metrics_per_message : The maximum number of metrics to put in a single JSON package & submit to OpenTSDB via a HTTP POST.  A recommended value is 5.
#                                   opentsdb_http_sanitize_metric : Removes all characters from the OpenTSDB 'metric' that are not officially allowed by OpenTSDB (per OpenTSDB documentation). Valid values are 'true' or 'false'.
#                                 Note 1: The 'n' at the end of 'opentsdb_http_output_module_n' is a number that is unique to that output module.
#                                 Note 2: If you are outputting metrics to an OpenTSDB server this module (HTTP), then you should not output to the same OpenTSDB server via telnet.
#                                 Examples: opentsdb_http_output_module_1 = true,http://My-OpenTsdb-Server.com:4242/api/put,2,5,true
#                                           opentsdb_http_output_module_2 = true,http://My-Other-OpenTsdb-Server.com:4242/api/put,2,10,false
opentsdb_telnet_output_module_1 = false,opentsdb.some-domain.com,4242,2,true
opentsdb_http_output_module_1 = false,http://opentsdb.some-domain.com:4242/api/put,2,5,true



### 'Sending data to InfluxDB' configuration options
#
# influxdb_v1_output_module_ : StatsAgg supports outputting to multiple InfluxDB endpoints. Each InfluxDB endpoint is defined in StatsAgg via an 'InfluxDB Output Module'.
#                              InfluxDB has multiple versions of it's read/write API, and this output module is called the 'InfluxDB v1' module. 
#                              'InfluxDB v1' output modules support outputting to InfluxDB version(s) 0.6x, 0.7x, and 0.8x
#                              The format for a 'InfluxDB HTTP Output Module' is: influxdb_v1_output_module_n = influxdb_v1_output_enabled,influxdb_v1_base_url,influxdb_v1_num_send_retry_attempts,influxdb_v1_max_metrics_per_message
#                                 influxdb_v1_output_enabled : Enables sending metrics to this InfluxDB output module. Valid values are 'true' or 'false'.
#                                 influxdb_v1_base_url : The base url that you want to send InfluxDB metrics to. This is generally expected to follow the convention of "http://domain:port/"
#                                 influxdb_v1_num_send_retry_attempts : The number of times to retry sending metrics to this InfluxDB output module before giving up. A recommended retry count is 2.
#                                 influxdb_v1_max_metrics_per_message : The maximum number of metrics to put in a single JSON package & submit to InfluxDB via a HTTP POST.  A recommended value is 10.
#                              Note 1: The 'n' at the end of 'influxdb_v1_output_module_n' is a number that is unique to that output module.
#                                 Examples: influxdb_v1_output_module_1 = true,http://My-InfluxDB-Server.com:8086/,2,10
#                                           influxdb_v1_output_module_2 = true,http://My-Other-InfluxDB-Server.com:8086/,3,15
influxdb_v1_output_module_1 = false,http://influxdb.some-domain.com:8086/,2,10



### 'Metric collector listener' configuration options
#
# statsd_tcp_listener_enabled : Defines whether this application will listen for & collect StatsD metrics via TCP.
#                               This listener accepts TCP traffic in the StatsD format.          
#                               Default : true
#
# statsd_tcp_listener_port : The TCP port that the StatsD listener runs on.
#                            Default : 8125
#
# statsd_udp_listener_enabled : Defines whether this application will listen for & collect StatsD metrics via UDP.
#                               This listener accepts UDP traffic in the StatsD format.          
#                               Default : true
#
# statsd_udp_listener_port : The UDP port that the StatsD listener runs on.
#                            Default : 8125
#
# graphite_aggregator_tcp_listener_enabled : Defines whether this application will listen for & collect Graphite metrics via TCP. 
#                                            This Graphite listener aggregates metrics.
#                                            This listener accepts TCP traffic in the Graphite format.                                
#                                            Default : true
#
# graphite_aggregator_tcp_listener_port : The TCP port that the Graphite aggregation listener runs on.
#                                         Default : 22003
#
# graphite_aggregator_udp_listener_enabled : Defines whether this application will listen for & collect Graphite metrics via UDP.
#                                            This Graphite listener aggregates metrics.
#                                            This listener accepts UDP traffic in the Graphite format.                                
#                                            Default : true
#
# graphite_aggregator_udp_listener_port : The UDP port that the Graphite aggregation listener runs on.
#                                         Default : 22003
#
# graphite_passthrough_tcp_listener_enabled : Defines whether this application will listen for & collect Graphite metrics via TCP. 
#                                             This Graphite listener does not aggregate metrics. It is purely a 'pass-through' for Graphite metrics.
#                                             This listener accepts TCP traffic in the Graphite plaintext format.                                
#                                             Default : true
#
# graphite_passthrough_tcp_listener_port : The TCP port that the Graphite pass-through listener runs on.
#                                          Default : 2003
#
# graphite_passthrough_udp_listener_enabled : Defines whether this application will listen for & collect Graphite metrics via UDP.
#                                             This Graphite listener does not aggregate metrics. It is purely a 'pass-through' for Graphite metrics.
#                                             This listener accepts UDP traffic in the Graphite plaintext format.                                
#                                             Default : true
#
# graphite_passthrough_udp_listener_port : The UDP port that the Graphite pass-through listener runs on.
#                                          Default : 2003
#
# opentsdb_tcp_telnet_listener_enabled : Defines whether this application will listen for & collect OpenTSDB metrics via TCP.
#                                        This OpenTSDB listener does not aggregate metrics. It is purely a 'pass-through' for OpenTSDB metrics.
#                                        This listener accepts TCP traffic in the OpenTSDB telnet format.                                
#                                        Default : true
#
# opentsdb_tcp_telnet_listener_port : The TCP port that the OpenTSDB telnet interface listener runs on.
#                                     Default : 4242
#
# opentsdb_http_listener_enabled : Defines whether this application will listen for & collect OpenTSDB metrics via HTTP.
#                                  This OpenTSDB listener does not aggregate metrics. It is purely a 'pass-through' for OpenTSDB metrics.
#                                  This listener accepts HTTP traffic in the OpenTSDB JSON format.                                
#                                  Default : true
#
# opentsdb_http_listener_port : The TCP port that the OpenTSDB HTTP interface listener runs on.
#                               Default : 4243
#
# influxdb_http_listener_enabled : Defines whether this application will listen for & collect InfluxDB metrics via HTTP.
#                                  This InfluxDB listener does not aggregate metrics. It is purely a 'pass-through' for InfluxDB metrics.
#                                  This listener accepts HTTP traffic in the InfluxDB JSON format used by InfluxDB 0.6x, 0.7x, 0.8x.                                
#                                  Default : true
#
# influxdb_http_listener_port : The TCP port that the InfluxDB HTTP interface listener runs on.
#                               Default : 8086
statsd_tcp_listener_enabled = true
statsd_tcp_listener_port = 8125
statsd_udp_listener_enabled = true
statsd_udp_listener_port = 8125
graphite_aggregator_tcp_listener_enabled = true
graphite_aggregator_tcp_listener_port = 22003
graphite_aggregator_udp_listener_enabled = true
graphite_aggregator_udp_listener_port = 22003
graphite_passthrough_tcp_listener_enabled = true
graphite_passthrough_tcp_listener_port = 2003
graphite_passthrough_udp_listener_enabled = true
graphite_passthrough_udp_listener_port = 2003
opentsdb_tcp_telnet_listener_enabled = true
opentsdb_tcp_telnet_listener_port = 4242
opentsdb_http_listener_enabled = true
opentsdb_http_listener_port = 4243
influxdb_http_listener_enabled = true
influxdb_http_listener_port = 8086



### 'Metric naming' configuration options
#
# global_metric_name_prefix_enabled : Dictates whether all metrics will have a prefix prepended to their metric paths.
#                                     Default : false
#
# global_metric_name_prefix_value : The value of the global metric name prefix. The metric name prefix will be prepended to the metric name, followed by a '.' character.
#                                   Default : statsagg
#
# global_aggregated_metrics_separator_string : When metric aggregation results in multiple outputted values, suffix labels are appended to their metric paths (aka buckets). 
#                                              This variable controls what the separation character(s) are. 
#                                              The default value of '.' is recommended when pairing StatsAgg with Graphite.
#                                              This applies to Graphite-aggregated metrics, StatsD timers, StatsD counters, and StatsD sets.
#                                              Example (when set to "~~~") : myBucket.timerName~~~mean
#                                                                            myBucket.timerName~~~sum
#                                              Default : .
#
# statsd_metric_name_prefix_enabled : Dictates whether all StatsD metrics will have a prefix prepended to their metric paths.                     
#                                     Default : false
#
# statsd_metric_name_prefix_value : The value of the metric name prefix. The metric name prefix will be prepended to the metric name, followed by a '.' character.
#                                   Default : stats
#
# statsd_metric_name_suffix_enabled : Dictates whether all StatsD metrics will have a suffix appended to their metric paths.
#                                     Default : false
#
# statsd_metric_name_suffix_value : The value of the metric name suffix. The metric name prefix will be appended to the metric name, preceded by a '.' character.
#                                   Default : (blank)
#
# statsd_counter_metric_name_prefix_enabled : Dictates whether StatsD counter metrics will have a prefix prepended to their metric paths.
#                                             Default : false
#
# statsd_counter_metric_name_prefix_value : The value of the metric name prefix. The metric name prefix will be prepended to the metric name, followed by a '.' character.
#                                           Default : counters
#
# statsd_gauge_metric_name_prefix_enabled : Dictates whether StatsD gauge metrics will have a prefix prepended to their metric paths.
#                                           Default : false
#
# statsd_gauge_metric_name_prefix_value : The value of the metric name prefix. The metric name prefix will be prepended to the metric name, followed by a '.' character.
#                                         Default : gauges
#
# statsd_timer_metric_name_prefix_enabled : Dictates whether StatsD timer metrics will have a prefix prepended to their metric paths. 
#                                           Default : false
#
# statsd_timer_metric_name_prefix_value : The value of the metric name prefix. The metric name prefix will be prepended to the metric name, followed by a '.' character.
#                                         Default : timers
#
# statsd_set_metric_name_prefix_enabled : Dictates whether StatsD set metrics will have a prefix prepended to their metric paths.
#                                         Default : false
#
# statsd_set_metric_name_prefix_value : The value of the metric name prefix. The metric name prefix will be prepended to the metric name, followed by a '.' character.
#                                       Default : sets
#
# graphite_aggregator_metric_name_prefix_enabled : Dictates whether all Graphite aggregator metrics will have a prefix prepended to their metric paths                             
#                                                  Default : false
#
# graphite_aggregator_metric_name_prefix_value : The value of the metric name prefix. The metric name prefix will be prepended to the metric name, followed by a '.' character.
#                                                Default : graphite-agg
#
# graphite_passthrough_metric_name_prefix_enabled : Dictates whether all Graphite pass-through metrics will have a prefix prepended to their metric paths.
#                                                   Default : false
#
# graphite_passthrough_metric_name_prefix_value : The value of the metric name prefix. The metric name prefix will be prepended to the metric name, followed by a '.' character.
#                                                 Default : graphite
#
# opentsdb_metric_name_prefix_enabled : Dictates whether all OpenTSDB metrics will have a prefix prepended to their metrics.
#                                       Default : false
#
# opentsdb_metric_name_prefix_value : The value of the metric name prefix. The metric name prefix will be prepended to the metric name, followed by a '.' character.
#                                     Default : opentsdb
#
# influxdb_metric_name_prefix_enabled : Dictates whether all InfluxDB metrics will have a prefix prepended to their metrics.
#                                       Default : false
#
# influxdb_metric_name_prefix_value : The value of the metric name prefix. The metric name prefix will be prepended to the metric name, followed by a '.' character.
#                                     Default : influxdb
#
# influxdb_include_database_name_in_non_native_output : InfluxDB metrics can be outputted to endpoints that don't support the construct of a 'database' (ex -- Graphite, OpenTSDB). 
#                                                       StatsAgg can be made to include or exclude the database from the metric name.
#                                                       If the database name is included, then it will be at the front of the metric name -- positioned before 'influxdb_metric_name_prefix'
#                                                       For example, if the InfluxDB database name is "LOL", then a Graphite metric-path might be "LOL.prefix.myMetric"
#                                                       Default : true
global_metric_name_prefix_enabled = false
global_metric_name_prefix_value = statsagg
global_aggregated_metrics_separator_string = .
statsd_metric_name_prefix_enabled = false
statsd_metric_name_prefix_value = stats
statsd_metric_name_suffix_enabled = false
statsd_metric_name_suffix_value = 
statsd_counter_metric_name_prefix_enabled = false
statsd_counter_metric_name_prefix_value = counters
statsd_gauge_metric_name_prefix_enabled = false
statsd_gauge_metric_name_prefix_value = gauges
statsd_timer_metric_name_prefix_enabled = false
statsd_timer_metric_name_prefix_value = timers
statsd_set_metric_name_prefix_enabled = false
statsd_set_metric_name_prefix_value = sets
graphite_aggregator_metric_name_prefix_enabled = false
graphite_aggregator_metric_name_prefix_value = graphite-agg
graphite_passthrough_metric_name_prefix_enabled = false
graphite_passthrough_metric_name_prefix_value = graphite
opentsdb_metric_name_prefix_enabled = false
opentsdb_metric_name_prefix_value = opentsdb
influxdb_metric_name_prefix_enabled = false
influxdb_metric_name_prefix_value = influxdb
influxdb_include_database_name_in_non_native_output = true



### 'StatsD' configuration options
#
# statsd_counter_send_0_on_inactive : When set to true, output a value of '0' for a bucket if no new metrics arrive during the aggregation window ("flush_time_agg").
#                                     When set to false, don't output anything for an inactive bucket.
#                                     Note - The previous window's metric aggregation counter value(s) are not persisted, so they will be lost if this application is stopped.
#                                     Default : true
#
# statsd_timer_send_0_on_inactive : When set to true, output a value of '0' for a bucket if no new metrics arrive during the aggregation window ("flush_time_agg").
#                                   When set to false, don't output anything for an inactive bucket.
#                                   Note - The previous window's metric aggregation counter value(s) are not persisted, so they will be lost if this application is stopped.
#                                   Default : true
#
# statsd_gauge_send_previous_value : If no new metrics arrive for a specific StatsD gauge metric bucket during the aggregation window, then send the previous aggregation window's value(s).
#                                    Note 1 - When this value is set to 'true', the previous window's metric aggregation gauge value(s) are persisted in memory.
#                                             If the setting 'statsd_persist_gauges' is set to 'true', gauge values will be persisted, so gauge buckets & values will NOT be lost if this application is stopped.
#                                    Note 2 - When this value is set to 'false', the previous window's metric aggregation gauge value(s) are not persisted, so they will be lost if this application is stopped.
#                                    Note 3 - When this value is set to 'false', gauge values are only aggregated against the other values that were received during the aggregation window.
#                                    Default : true
#
# statsd_set_send_0_on_inactive : When set to true, output a value of '0' for a bucket if no new metrics arrive during the aggregation window ("flush_time_agg").
#                                 When set to false, don't output anything for an inactive bucket.
#                                 Note - The previous window's metric aggregation counter value(s) are not persisted, so they will be lost if this application is stopped.
#                                 Default : true
#
# statsd_nth_percentiles : For StatsD timers, the nth percentile is computed for the values associated with a given bucket. This variable controls what the value of 'n' is.
#                          Multiple nth percentile values can be computed. To compute & output multiple nth percentiles, list the percentiles separated by commas.
#                          If you want the 'top nth percentile' values, use a negative value for the value of 'n'.
#                          Example: -35,75,80,95
#                          Default : 90
#
# statsd_histograms : For StatsD timers, this configures histograms. Histograms allow one to see the frequency distribution of timer metric values by counting how many metric values 
#                     fall within a predefined set of ranges. The ranges are controlled by this configuration variable. 0 is assumed to be the low-end of the range, and the first bin-value will
#                     cover the range of "0 - bin_#". Ranges are inclusive on the lower-end & exclusive on the upper-end.
#                     See the StatAgg manual for detailed information about how histograms work.
#                     The format is: [ {metric: 'bucketToMatch_1', bins: [bin1_#, bin2_#, bin3_#, 'inf']}, {metric: 'bucketToMatch_2', bins: [bin1_#, bin2_#]} ]
#                     Example: [ {metric: 'myMetric_1', bins: [5, 10, 15, 'inf']}, {metric: 'myMetric_2', bins: [25, 50]} ]
#                     Default : []
#
# statsd_use_legacy_name_spacing : For StatsD counters, 'legacy namespacing' makes counter metrics show up in different output paths. 
#                                  Rates are recorded under {global_metric_name_prefix_value}.{statsd_metric_name_prefix_value}.bucket_name
#                                  Absolute count (sum) is found under stats_counts.bucket_name
#                                  This feature was added to StatsAgg for compatibility with StatsD, but it is highly recommended that you DO NOT enable this setting.
#                                  Default : false
#
# statsd_persist_gauges : StatsD gauges can have their buckets & values persisted in the StatsAgg database. This allows gauges to survive across StatsAgg restarts.
#                         That is to say, after StatsAgg restarts, gauge metrics just "picks up where they left off".
#                         StatsD (the official project) does not natively have this capability. However, persisting gauges is enabled by default in StatsAgg because it is a better fit for most gauge use-cases.
#                         Default : true
statsd_counter_send_0_on_inactive = true
statsd_timer_send_0_on_inactive = true
statsd_gauge_send_previous_value = true
statsd_set_send_0_on_inactive = true
statsd_nth_percentiles = 90
statsd_histograms = []
statsd_use_legacy_name_spacing = false
statsd_persist_gauges = true



# influxdb_default_database_name : When metrics are output to InfluxDB, they must be sent to an specific InfluxDB 'database', which is essentially a metric database schema.
#                                  Technologies like StatsD, Graphite, and OpenTSDB do not have a concept of a 'database', so if StatsAgg is configured to output to InfluxDB,   
#                                  then the metrics will be sent to the database specified by the 'influxdb_default_database_name' variable.
#                                  Please note that StatsAgg does not create the database specified by the 'influxdb_default_database_name' in InfluxDB. You will need to create the database manually in InfluxDB.
#                                  Default : statsagg
#
# influxdb_default_database_username : When technologies like StatsD, Graphite, and OpenTSDB output to InfluxDB, they output to a database specified by 'influxdb_default_database_name'
#                                      'influxdb_default_database_username' specifies the username that is used to connect to the database specified by 'influxdb_default_database_name'
#                                      Default : statsagg
#
# influxdb_default_database_password : When technologies like StatsD, Graphite, and OpenTSDB output to InfluxDB, they output to a database specified by 'influxdb_default_database_name'
#                                      'influxdb_default_database_password' specifies the password that is used to connect to the database specified by 'influxdb_default_database_name'
#                                      Default : statsagg
influxdb_default_database_name = statsagg
influxdb_default_database_username = statsagg
influxdb_default_database_password = statsagg



### 'Alert' configuration options
#
# alert_routine_enabled : Specifies whether the alerting routine runs or not. When this option is turned off, alerts & suspensions will never be checked against their criteria.
#                         Because setting this option to 'false' disables a large potion of StatsAgg's core functionality, it is highly recommended that this setting remain set to 'true'.
#                         Disabling this option may have a positive impact on application performance when alerting is not needed.           
#                         Default : true
#
# alert_routine_interval : The interval (in milliseconds) that the alert routine & cleanup routine run on. 
#                          Running this more frequently than the 'flush_time_agg' value is not advised.                
#                          Default : 5000
#
# alert_send_email_enabled : Controls whether the email is actually sent or not. This should only be off for debugging purposes.
#                            Default : false
#
# alert_max_metrics_in_email : The maximum number of metrics that will be put in an alert email. 
#                              Sizing this value too could large could make emails very large             
#                              Default : 100
#
# alert_output_status : When outputting metrics to any output module is enabled, enabling this setting will output the status of each alert to all enabled output modules.
#                       0 = alert not triggered, 1 = caution triggered, 2 = danger triggered, 3 = caution & danger triggered
#                       Default : true
#
# alert_output_status_metric_prefix : When 'alert_output_status' is enabled, this defines the metric prefix that is used to group the alert statuses.
#                                     Default : StatsAgg-Alerts
#
# alert_statsagg_location : A url to the root location of StatsAgg. 
#                           When this is defined, email alerts will have clickable links to the StatsAgg user interface.
#                           Example: alert_statsagg_location = http://mywebsite.com/StatsAgg
#                           Default : (blank)
#
# alert_wait_time_after_restart : When StatsAgg restarts, alerts that were 'active' before the restart will not have any datapoints.
#                                 This makes the alerts prone to quickly firing a 'Positive Alert' & then re-alert when new datapoints arrive.
#                                 This variable delays the alert routine from firing a 'Positive Alert' for 'alert_wait_time_after_restart' milliseconds.
#                                 This allows new datapoints to be collected by StatsAgg & helps avoid false alerts.
#                                 Default : 120000
#
# alert_metric_association_threads : The number of threads that StatsAgg will use to run metric-group & suspension regexes against metrics. 
#                                    The higher the number, the faster that metric-association will run.
#                                    This metric association is a cpu-heavy activity, you should not set this number too high, or you may not have enough cpu for other StatsAgg routines.
#                                    A good balance is this to equal the number of ("cpu cores of the StatsAgg server" / 2)
#                                    The maximum that this should be set to is ("cpu cores of the StatsAgg server" - 1)
#                                    Default : ("cpu cores of the StatsAgg server" / 2) -- where the lowest allowed value is 1
#
# alert_smtp_host : The email smtp server host (ip or dns)
#                   Default : 127.0.0.1
#
# alert_smtp_port : The smtp port    
#                   Default : 25
#
# alert_smtp_username : The smtp username
#                       Default : (blank)
#
# alert_smtp_password : The smtp password   
#                       Default : (blank)
#
# alert_smtp_connection_timeout : The connection timeout to the smtp server, in milliseconds
#                                 Default : 15000
#
# alert_smtp_use_ssl_tls : Specifies whether to use ssl/tls with the smtp server or not
#                          Default : false
#
# alert_smtp_use_starttls : Specifies whether to use starttls with the smtp server or not
#                           Default : false
#
# alert_smtp_from_address : The 'from address' on emails sent by StatsAgg 
#                           Default : noreply@noreply.com
#
# alert_smtp_from_name : The 'from name' on emails sent by StatsAgg
#                        Default : StatsAgg
alert_routine_enabled = true
alert_routine_interval = 5000
alert_send_email_enabled = false
alert_max_metrics_in_email = 100
alert_output_status = true
alert_output_status_metric_prefix = StatsAgg-Alerts
alert_statsagg_location =
alert_wait_time_after_restart = 120000
alert_metric_association_threads = 2
alert_smtp_host = 127.0.0.1
alert_smtp_port = 25
alert_smtp_username =
alert_smtp_password =
alert_smtp_connection_timeout = 15000
alert_smtp_use_ssl_tls = false
alert_smtp_use_starttls = false
alert_smtp_from_address = noreply@noreply.com
alert_smtp_from_name = StatsAgg



### PagerDuty integration options
#
# pagerduty_integration_enabled : Enables or disables PagerDuty integration. 
#                                 Controls if PagerDuty stuff is shown in the user-interface & if StatsAgg will try to interact with PagerDuty as alerts trigger.
#                                 Default : false
pagerduty_integration_enabled = false



### 'Website GUI' configuration options
#
# The StatsAgg website user interface can be customized to include custom url links in the 'actions menu'.
# The format for a custom link in the actions menu is:
#   custom_action_url_n=url,link_text
#     Note: the 'n' at the end of 'custom_action_url_n' is a number that is unique to that custom link.
#     Examples: custom_action_url_1 = http://www.google.com,Goto Google
#               custom_action_url_2 = http://www.yahoo.com,Goto Yahoo
custom_action_url_1 = http://google.com,Goto Google



### 'Advanced' configuration options -- do not modify unless you REALLY know what you're doing
#
# output_module_max_connect_time : The maximum amount of time (in milliseconds) to wait for a TCP connection to be established by an output module. 
#                                  This applies to raw TCP (Graphite, OpenTSDB telnet) and HTTP (OpenTSDB HTTP, InfluxDB).
#                                  Default : 3000
#
# output_module_max_read_time : The maximum amount of time (in milliseconds) that an output module can wait for and/or read the response from the server.
#                               This currently only applies to HTTP (OpenTSDB HTTP, InfluxDB).
#                               Default : 120000
#
# output_module_max_concurrent_threads : The maximum number of output modules that can be concurrently outputting to their endpoints. All output modules contribute to the count of 'what is concurrently running'.
#                                        If this number is exceeded, then further output requests will be dropped (until some threads become available).
#                                        This is largely to guard against a slow-performing output endpoint causing metrics to build up in StatsAgg (and potentially crash StatsAgg).
#                                        Default : 25
#
# output_module_max_concurrent_threads_for_single_module : For a specific output modules, this variable controls maximum number of threads that can concurrently output to this endpoint.
#                                                          If this number is exceeded, then further output requests will be dropped (until some threads become available).
#                                                          This is largely to guard against a slow-performing output endpoint causing metrics to build up in StatsAgg (and potentially crash StatsAgg).
#                                                          Default : 10
#
# metric_group_api_max_metric_associations : The /api/metric-group-details api has an optional parameter to return a list of all metric-keys that are currently associated with the metric group.
#                                            This parameter limits the maximum number of metrics that can be returned by such an api call. This limit mainly exists to protect StatsAgg from excessive memory usage.
#                                            Default : 50000
output_module_max_connect_time = 3000
output_module_max_read_time = 120000
output_module_max_concurrent_threads = 25
output_module_max_concurrent_threads_for_single_module = 10
metric_group_api_max_metric_associations = 50000